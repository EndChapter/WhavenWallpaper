 //Old JpegDownload
 #pragma once
public delegate System::Void jpegDownloadCallback();
ref struct JpegDownload{
	jpegDownloadCallback^ jDownCb;
	char* _url;
	JpegDownload(char* urlPath, jpegDownloadCallback^ jdc) {
		jDownCb = jdc;
		_url = urlPath;
	}
private: delegate size_t jpegCb(void* ptr, size_t size, size_t nmemb, void* userdata);
private: static size_t jpegCallBack(void* ptr, size_t size, size_t nmemb, void* userdata)
{
	FILE* stream = (FILE*)userdata;
	if (!stream)
	{
		return 0;
	}

	size_t written = fwrite((FILE*)ptr, size, nmemb, stream);
	return written;
}
private: System::Void download_jpeg(char* i)
{
	// String^ l = gcnew String("Downloading jpeg file");
	// this->toolStripStatusLabel1->Text = l;
	FILE* fp = fopen("out.jpg", "wb");
	CURL* curlCtx = curl_easy_init();
	curl_easy_setopt(curlCtx, CURLOPT_URL, _url);
	if (curl_easy_setopt(curlCtx, CURLOPT_WRITEDATA, fp) == CURLE_OK) {

		jpegCb^ jpgCb = gcnew jpegCb(&jpegCallBack);

		curl_easy_setopt(curlCtx, CURLOPT_WRITEFUNCTION, jpgCb);
		curl_easy_setopt(curlCtx, CURLOPT_FOLLOWLOCATION, 1);

		CURLcode rc = curl_easy_perform(curlCtx);
		if (rc)
		{
			// l = gcnew String("Jpeg file downloaded.");
			// this->toolStripStatusLabel1->Text = l;
		}

		long res_code = 0;
		curl_easy_getinfo(curlCtx, CURLINFO_RESPONSE_CODE, &res_code);
		if (!((res_code == 200 || res_code == 201) && rc != CURLE_ABORTED_BY_CALLBACK))
		{
			// l = gcnew String("Failed to download jpeg.");
			// this->toolStripStatusLabel1->Text = l;
		}

		curl_easy_cleanup(curlCtx);
		_fclose_nolock(fp);
		fp = NULL;
		_setWallpaper^ sw = gcnew _setWallpaper(this, &JpegDownload::setWallpaper);
		sw();
	}
	else {
		// l = gcnew String("Failed to write jpeg file");
		// this->toolStripStatusLabel1->Text = l;
	}
	System::Runtime::InteropServices::Marshal::FreeHGlobal(System::IntPtr(_url));
};
private: delegate System::Void _setWallpaper();
private: System::Void setWallpaper() {
	System::String^ l;
	wchar_t path[_MAX_PATH];
	wchar_t* rtVal = _wfullpath(path, L"out.jpg", _MAX_PATH);
	if (SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, path, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE))
	{
		// l = gcnew String("Wallpaper changed.");
		// this->toolStripStatusLabel1->Text = l;
	}
	else
	{
		// l = gcnew String("Wallpaper change error.");
		// this->toolStripStatusLabel1->Text = l;
	}
}

};